// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: role_route.sql

package repository

import (
	"context"
)

const addRoleToUser = `-- name: AddRoleToUser :exec
INSERT INTO users_roles (
    user_id,
    role_id
) VALUES (
  $1, $2 
)
`

type AddRoleToUserParams struct {
	UserID int64
	RoleID int32
}

func (q *Queries) AddRoleToUser(ctx context.Context, db DBTX, arg AddRoleToUserParams) error {
	_, err := db.Exec(ctx, addRoleToUser, arg.UserID, arg.RoleID)
	return err
}

const createRole = `-- name: CreateRole :one
INSERT INTO roles (
    code
) VALUES (
  $1 
) RETURNING id, code
`

func (q *Queries) CreateRole(ctx context.Context, db DBTX, code string) (Role, error) {
	row := db.QueryRow(ctx, createRole, code)
	var i Role
	err := row.Scan(&i.ID, &i.Code)
	return i, err
}

const getAllRoles = `-- name: GetAllRoles :many
SELECT id, code FROM roles ORDER BY id ASC
`

func (q *Queries) GetAllRoles(ctx context.Context, db DBTX) ([]Role, error) {
	rows, err := db.Query(ctx, getAllRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(&i.ID, &i.Code); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllRolesRoutes = `-- name: GetAllRolesRoutes :many
SELECT role_id, route_id FROM roles_routes
`

func (q *Queries) GetAllRolesRoutes(ctx context.Context, db DBTX) ([]RolesRoute, error) {
	rows, err := db.Query(ctx, getAllRolesRoutes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RolesRoute
	for rows.Next() {
		var i RolesRoute
		if err := rows.Scan(&i.RoleID, &i.RouteID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllRoutes = `-- name: GetAllRoutes :many
SELECT id, path, description FROM routes ORDER BY id ASC
`

func (q *Queries) GetAllRoutes(ctx context.Context, db DBTX) ([]Route, error) {
	rows, err := db.Query(ctx, getAllRoutes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Route
	for rows.Next() {
		var i Route
		if err := rows.Scan(&i.ID, &i.Path, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoleByCode = `-- name: GetRoleByCode :one
SELECT id, code FROM roles 
WHERE code = $1
`

func (q *Queries) GetRoleByCode(ctx context.Context, db DBTX, code string) (Role, error) {
	row := db.QueryRow(ctx, getRoleByCode, code)
	var i Role
	err := row.Scan(&i.ID, &i.Code)
	return i, err
}

const getRouteByPath = `-- name: GetRouteByPath :one
SELECT id, path, description FROM routes
WHERE path = $1
`

func (q *Queries) GetRouteByPath(ctx context.Context, db DBTX, path string) (Route, error) {
	row := db.QueryRow(ctx, getRouteByPath, path)
	var i Route
	err := row.Scan(&i.ID, &i.Path, &i.Description)
	return i, err
}

const getUserRolesByUserID = `-- name: GetUserRolesByUserID :many
SELECT user_id, role_id FROM users_roles 
WHERE user_id = $1
`

func (q *Queries) GetUserRolesByUserID(ctx context.Context, db DBTX, userID int64) ([]UsersRole, error) {
	rows, err := db.Query(ctx, getUserRolesByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UsersRole
	for rows.Next() {
		var i UsersRole
		if err := rows.Scan(&i.UserID, &i.RoleID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
