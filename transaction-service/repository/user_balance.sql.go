// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user_balance.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUserBalanceOrDecreaseAmount = `-- name: CreateUserBalanceOrDecreaseAmount :one
INSERT INTO user_balances (
    user_id,
    amount,
    created_at,
    updated_at
) VALUES (
    $1, $2, now(), now()
) ON CONFLICT (user_id) DO UPDATE SET amount = user_balances.amount-EXCLUDED.amount,  updated_at = now() 
RETURNING id, user_id, amount, created_at, updated_at
`

type CreateUserBalanceOrDecreaseAmountParams struct {
	UserID int64
	Amount pgtype.Numeric
}

func (q *Queries) CreateUserBalanceOrDecreaseAmount(ctx context.Context, db DBTX, arg CreateUserBalanceOrDecreaseAmountParams) (UserBalance, error) {
	row := db.QueryRow(ctx, createUserBalanceOrDecreaseAmount, arg.UserID, arg.Amount)
	var i UserBalance
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUserBalanceOrIncreaseAmount = `-- name: CreateUserBalanceOrIncreaseAmount :one
INSERT INTO user_balances (
    user_id,
    amount,
    created_at,
    updated_at
) VALUES (
    $1, $2, now(), now()
) ON CONFLICT (user_id) DO UPDATE SET amount = user_balances.amount+EXCLUDED.amount,  updated_at = now() 
RETURNING id, user_id, amount, created_at, updated_at
`

type CreateUserBalanceOrIncreaseAmountParams struct {
	UserID int64
	Amount pgtype.Numeric
}

func (q *Queries) CreateUserBalanceOrIncreaseAmount(ctx context.Context, db DBTX, arg CreateUserBalanceOrIncreaseAmountParams) (UserBalance, error) {
	row := db.QueryRow(ctx, createUserBalanceOrIncreaseAmount, arg.UserID, arg.Amount)
	var i UserBalance
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
