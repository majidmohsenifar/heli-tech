// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package repository

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type Kind string

const (
	KindWITHDRAW Kind = "WITHDRAW"
	KindDEPOSIT  Kind = "DEPOSIT"
)

func (e *Kind) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Kind(s)
	case string:
		*e = Kind(s)
	default:
		return fmt.Errorf("unsupported scan type for Kind: %T", src)
	}
	return nil
}

type NullKind struct {
	Kind  Kind
	Valid bool // Valid is true if Kind is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullKind) Scan(value interface{}) error {
	if value == nil {
		ns.Kind, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Kind.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullKind) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Kind), nil
}

type Transaction struct {
	ID        int64
	UserID    int64
	Kind      Kind
	Amount    pgtype.Numeric
	CreatedAt pgtype.Timestamptz
}

type UserBalance struct {
	ID        int64
	UserID    int64
	Amount    pgtype.Numeric
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
}
