// Code generated by mockery v2.33.3. DO NOT EDIT.

package mocks

import (
	context "context"

	transaction "github.com/majidmohsenifar/heli-tech/transaction-service/service/transaction"
	mock "github.com/stretchr/testify/mock"
)

// MockTransactionEventManager is an autogenerated mock type for the TransactionEventManager type
type MockTransactionEventManager struct {
	mock.Mock
}

type MockTransactionEventManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransactionEventManager) EXPECT() *MockTransactionEventManager_Expecter {
	return &MockTransactionEventManager_Expecter{mock: &_m.Mock}
}

// PublishTransactionCreatedEvent provides a mock function with given fields: ctx, params
func (_m *MockTransactionEventManager) PublishTransactionCreatedEvent(ctx context.Context, params transaction.TransactionCreatedEventParams) {
	_m.Called(ctx, params)
}

// MockTransactionEventManager_PublishTransactionCreatedEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishTransactionCreatedEvent'
type MockTransactionEventManager_PublishTransactionCreatedEvent_Call struct {
	*mock.Call
}

// PublishTransactionCreatedEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - params transaction.TransactionCreatedEventParams
func (_e *MockTransactionEventManager_Expecter) PublishTransactionCreatedEvent(ctx interface{}, params interface{}) *MockTransactionEventManager_PublishTransactionCreatedEvent_Call {
	return &MockTransactionEventManager_PublishTransactionCreatedEvent_Call{Call: _e.mock.On("PublishTransactionCreatedEvent", ctx, params)}
}

func (_c *MockTransactionEventManager_PublishTransactionCreatedEvent_Call) Run(run func(ctx context.Context, params transaction.TransactionCreatedEventParams)) *MockTransactionEventManager_PublishTransactionCreatedEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(transaction.TransactionCreatedEventParams))
	})
	return _c
}

func (_c *MockTransactionEventManager_PublishTransactionCreatedEvent_Call) Return() *MockTransactionEventManager_PublishTransactionCreatedEvent_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTransactionEventManager_PublishTransactionCreatedEvent_Call) RunAndReturn(run func(context.Context, transaction.TransactionCreatedEventParams)) *MockTransactionEventManager_PublishTransactionCreatedEvent_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTransactionEventManager creates a new instance of MockTransactionEventManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransactionEventManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransactionEventManager {
	mock := &MockTransactionEventManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
