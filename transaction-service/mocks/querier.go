// Code generated by mockery v2.33.3. DO NOT EDIT.

package mocks

import (
	context "context"

	repository "github.com/majidmohsenifar/heli-tech/transaction-service/repository"
	mock "github.com/stretchr/testify/mock"
)

// MockQuerier is an autogenerated mock type for the Querier type
type MockQuerier struct {
	mock.Mock
}

type MockQuerier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQuerier) EXPECT() *MockQuerier_Expecter {
	return &MockQuerier_Expecter{mock: &_m.Mock}
}

// CreateTransaction provides a mock function with given fields: ctx, db, arg
func (_m *MockQuerier) CreateTransaction(ctx context.Context, db repository.DBTX, arg repository.CreateTransactionParams) (repository.Transaction, error) {
	ret := _m.Called(ctx, db, arg)

	var r0 repository.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.DBTX, repository.CreateTransactionParams) (repository.Transaction, error)); ok {
		return rf(ctx, db, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.DBTX, repository.CreateTransactionParams) repository.Transaction); ok {
		r0 = rf(ctx, db, arg)
	} else {
		r0 = ret.Get(0).(repository.Transaction)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.DBTX, repository.CreateTransactionParams) error); ok {
		r1 = rf(ctx, db, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_CreateTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTransaction'
type MockQuerier_CreateTransaction_Call struct {
	*mock.Call
}

// CreateTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - db repository.DBTX
//   - arg repository.CreateTransactionParams
func (_e *MockQuerier_Expecter) CreateTransaction(ctx interface{}, db interface{}, arg interface{}) *MockQuerier_CreateTransaction_Call {
	return &MockQuerier_CreateTransaction_Call{Call: _e.mock.On("CreateTransaction", ctx, db, arg)}
}

func (_c *MockQuerier_CreateTransaction_Call) Run(run func(ctx context.Context, db repository.DBTX, arg repository.CreateTransactionParams)) *MockQuerier_CreateTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.DBTX), args[2].(repository.CreateTransactionParams))
	})
	return _c
}

func (_c *MockQuerier_CreateTransaction_Call) Return(_a0 repository.Transaction, _a1 error) *MockQuerier_CreateTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_CreateTransaction_Call) RunAndReturn(run func(context.Context, repository.DBTX, repository.CreateTransactionParams) (repository.Transaction, error)) *MockQuerier_CreateTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUserBalanceOrDecreaseAmount provides a mock function with given fields: ctx, db, arg
func (_m *MockQuerier) CreateUserBalanceOrDecreaseAmount(ctx context.Context, db repository.DBTX, arg repository.CreateUserBalanceOrDecreaseAmountParams) (repository.UserBalance, error) {
	ret := _m.Called(ctx, db, arg)

	var r0 repository.UserBalance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.DBTX, repository.CreateUserBalanceOrDecreaseAmountParams) (repository.UserBalance, error)); ok {
		return rf(ctx, db, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.DBTX, repository.CreateUserBalanceOrDecreaseAmountParams) repository.UserBalance); ok {
		r0 = rf(ctx, db, arg)
	} else {
		r0 = ret.Get(0).(repository.UserBalance)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.DBTX, repository.CreateUserBalanceOrDecreaseAmountParams) error); ok {
		r1 = rf(ctx, db, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_CreateUserBalanceOrDecreaseAmount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUserBalanceOrDecreaseAmount'
type MockQuerier_CreateUserBalanceOrDecreaseAmount_Call struct {
	*mock.Call
}

// CreateUserBalanceOrDecreaseAmount is a helper method to define mock.On call
//   - ctx context.Context
//   - db repository.DBTX
//   - arg repository.CreateUserBalanceOrDecreaseAmountParams
func (_e *MockQuerier_Expecter) CreateUserBalanceOrDecreaseAmount(ctx interface{}, db interface{}, arg interface{}) *MockQuerier_CreateUserBalanceOrDecreaseAmount_Call {
	return &MockQuerier_CreateUserBalanceOrDecreaseAmount_Call{Call: _e.mock.On("CreateUserBalanceOrDecreaseAmount", ctx, db, arg)}
}

func (_c *MockQuerier_CreateUserBalanceOrDecreaseAmount_Call) Run(run func(ctx context.Context, db repository.DBTX, arg repository.CreateUserBalanceOrDecreaseAmountParams)) *MockQuerier_CreateUserBalanceOrDecreaseAmount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.DBTX), args[2].(repository.CreateUserBalanceOrDecreaseAmountParams))
	})
	return _c
}

func (_c *MockQuerier_CreateUserBalanceOrDecreaseAmount_Call) Return(_a0 repository.UserBalance, _a1 error) *MockQuerier_CreateUserBalanceOrDecreaseAmount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_CreateUserBalanceOrDecreaseAmount_Call) RunAndReturn(run func(context.Context, repository.DBTX, repository.CreateUserBalanceOrDecreaseAmountParams) (repository.UserBalance, error)) *MockQuerier_CreateUserBalanceOrDecreaseAmount_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUserBalanceOrIncreaseAmount provides a mock function with given fields: ctx, db, arg
func (_m *MockQuerier) CreateUserBalanceOrIncreaseAmount(ctx context.Context, db repository.DBTX, arg repository.CreateUserBalanceOrIncreaseAmountParams) (repository.UserBalance, error) {
	ret := _m.Called(ctx, db, arg)

	var r0 repository.UserBalance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.DBTX, repository.CreateUserBalanceOrIncreaseAmountParams) (repository.UserBalance, error)); ok {
		return rf(ctx, db, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.DBTX, repository.CreateUserBalanceOrIncreaseAmountParams) repository.UserBalance); ok {
		r0 = rf(ctx, db, arg)
	} else {
		r0 = ret.Get(0).(repository.UserBalance)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.DBTX, repository.CreateUserBalanceOrIncreaseAmountParams) error); ok {
		r1 = rf(ctx, db, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_CreateUserBalanceOrIncreaseAmount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUserBalanceOrIncreaseAmount'
type MockQuerier_CreateUserBalanceOrIncreaseAmount_Call struct {
	*mock.Call
}

// CreateUserBalanceOrIncreaseAmount is a helper method to define mock.On call
//   - ctx context.Context
//   - db repository.DBTX
//   - arg repository.CreateUserBalanceOrIncreaseAmountParams
func (_e *MockQuerier_Expecter) CreateUserBalanceOrIncreaseAmount(ctx interface{}, db interface{}, arg interface{}) *MockQuerier_CreateUserBalanceOrIncreaseAmount_Call {
	return &MockQuerier_CreateUserBalanceOrIncreaseAmount_Call{Call: _e.mock.On("CreateUserBalanceOrIncreaseAmount", ctx, db, arg)}
}

func (_c *MockQuerier_CreateUserBalanceOrIncreaseAmount_Call) Run(run func(ctx context.Context, db repository.DBTX, arg repository.CreateUserBalanceOrIncreaseAmountParams)) *MockQuerier_CreateUserBalanceOrIncreaseAmount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.DBTX), args[2].(repository.CreateUserBalanceOrIncreaseAmountParams))
	})
	return _c
}

func (_c *MockQuerier_CreateUserBalanceOrIncreaseAmount_Call) Return(_a0 repository.UserBalance, _a1 error) *MockQuerier_CreateUserBalanceOrIncreaseAmount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_CreateUserBalanceOrIncreaseAmount_Call) RunAndReturn(run func(context.Context, repository.DBTX, repository.CreateUserBalanceOrIncreaseAmountParams) (repository.UserBalance, error)) *MockQuerier_CreateUserBalanceOrIncreaseAmount_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionByID provides a mock function with given fields: ctx, db, id
func (_m *MockQuerier) GetTransactionByID(ctx context.Context, db repository.DBTX, id int64) (repository.Transaction, error) {
	ret := _m.Called(ctx, db, id)

	var r0 repository.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.DBTX, int64) (repository.Transaction, error)); ok {
		return rf(ctx, db, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.DBTX, int64) repository.Transaction); ok {
		r0 = rf(ctx, db, id)
	} else {
		r0 = ret.Get(0).(repository.Transaction)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.DBTX, int64) error); ok {
		r1 = rf(ctx, db, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetTransactionByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionByID'
type MockQuerier_GetTransactionByID_Call struct {
	*mock.Call
}

// GetTransactionByID is a helper method to define mock.On call
//   - ctx context.Context
//   - db repository.DBTX
//   - id int64
func (_e *MockQuerier_Expecter) GetTransactionByID(ctx interface{}, db interface{}, id interface{}) *MockQuerier_GetTransactionByID_Call {
	return &MockQuerier_GetTransactionByID_Call{Call: _e.mock.On("GetTransactionByID", ctx, db, id)}
}

func (_c *MockQuerier_GetTransactionByID_Call) Run(run func(ctx context.Context, db repository.DBTX, id int64)) *MockQuerier_GetTransactionByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.DBTX), args[2].(int64))
	})
	return _c
}

func (_c *MockQuerier_GetTransactionByID_Call) Return(_a0 repository.Transaction, _a1 error) *MockQuerier_GetTransactionByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetTransactionByID_Call) RunAndReturn(run func(context.Context, repository.DBTX, int64) (repository.Transaction, error)) *MockQuerier_GetTransactionByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserBalanceByUserID provides a mock function with given fields: ctx, db, userID
func (_m *MockQuerier) GetUserBalanceByUserID(ctx context.Context, db repository.DBTX, userID int64) (repository.UserBalance, error) {
	ret := _m.Called(ctx, db, userID)

	var r0 repository.UserBalance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.DBTX, int64) (repository.UserBalance, error)); ok {
		return rf(ctx, db, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.DBTX, int64) repository.UserBalance); ok {
		r0 = rf(ctx, db, userID)
	} else {
		r0 = ret.Get(0).(repository.UserBalance)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.DBTX, int64) error); ok {
		r1 = rf(ctx, db, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetUserBalanceByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserBalanceByUserID'
type MockQuerier_GetUserBalanceByUserID_Call struct {
	*mock.Call
}

// GetUserBalanceByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - db repository.DBTX
//   - userID int64
func (_e *MockQuerier_Expecter) GetUserBalanceByUserID(ctx interface{}, db interface{}, userID interface{}) *MockQuerier_GetUserBalanceByUserID_Call {
	return &MockQuerier_GetUserBalanceByUserID_Call{Call: _e.mock.On("GetUserBalanceByUserID", ctx, db, userID)}
}

func (_c *MockQuerier_GetUserBalanceByUserID_Call) Run(run func(ctx context.Context, db repository.DBTX, userID int64)) *MockQuerier_GetUserBalanceByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.DBTX), args[2].(int64))
	})
	return _c
}

func (_c *MockQuerier_GetUserBalanceByUserID_Call) Return(_a0 repository.UserBalance, _a1 error) *MockQuerier_GetUserBalanceByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetUserBalanceByUserID_Call) RunAndReturn(run func(context.Context, repository.DBTX, int64) (repository.UserBalance, error)) *MockQuerier_GetUserBalanceByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserTransactionsByPagination provides a mock function with given fields: ctx, db, arg
func (_m *MockQuerier) GetUserTransactionsByPagination(ctx context.Context, db repository.DBTX, arg repository.GetUserTransactionsByPaginationParams) ([]repository.Transaction, error) {
	ret := _m.Called(ctx, db, arg)

	var r0 []repository.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.DBTX, repository.GetUserTransactionsByPaginationParams) ([]repository.Transaction, error)); ok {
		return rf(ctx, db, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.DBTX, repository.GetUserTransactionsByPaginationParams) []repository.Transaction); ok {
		r0 = rf(ctx, db, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.DBTX, repository.GetUserTransactionsByPaginationParams) error); ok {
		r1 = rf(ctx, db, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetUserTransactionsByPagination_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserTransactionsByPagination'
type MockQuerier_GetUserTransactionsByPagination_Call struct {
	*mock.Call
}

// GetUserTransactionsByPagination is a helper method to define mock.On call
//   - ctx context.Context
//   - db repository.DBTX
//   - arg repository.GetUserTransactionsByPaginationParams
func (_e *MockQuerier_Expecter) GetUserTransactionsByPagination(ctx interface{}, db interface{}, arg interface{}) *MockQuerier_GetUserTransactionsByPagination_Call {
	return &MockQuerier_GetUserTransactionsByPagination_Call{Call: _e.mock.On("GetUserTransactionsByPagination", ctx, db, arg)}
}

func (_c *MockQuerier_GetUserTransactionsByPagination_Call) Run(run func(ctx context.Context, db repository.DBTX, arg repository.GetUserTransactionsByPaginationParams)) *MockQuerier_GetUserTransactionsByPagination_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.DBTX), args[2].(repository.GetUserTransactionsByPaginationParams))
	})
	return _c
}

func (_c *MockQuerier_GetUserTransactionsByPagination_Call) Return(_a0 []repository.Transaction, _a1 error) *MockQuerier_GetUserTransactionsByPagination_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetUserTransactionsByPagination_Call) RunAndReturn(run func(context.Context, repository.DBTX, repository.GetUserTransactionsByPaginationParams) ([]repository.Transaction, error)) *MockQuerier_GetUserTransactionsByPagination_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockQuerier creates a new instance of MockQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQuerier {
	mock := &MockQuerier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
